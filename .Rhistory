```{r echo=TRUE}
# read input data
movement <- read.csv("activity.csv")
```
There are a total of 17,568 observations in this dataset.
The variables included in this dataset are:
- steps: Number of steps taking in a 5-minute interval (missing values are coded as NA)
- date: The date on which the measurement was taken in YYYY-MM-DD format
- interval: Identifier for the 5-minute interval in which measurement was taken
## What is mean total number of steps taken per day?
```{r echo=TRUE, tidy=FALSE, fig.height=6, fig.width=11}
steps.perday <- aggregate(movement$steps, by= list(movement$date), sum, na.rm=T)
# find mean and median of steps per day
mean.steps.perday   <- mean  (steps.perday$x)
median.steps.perday <- median(steps.perday$x)
mean.str   <- formatC(mean.steps.perday  , format="f", digits=2)
median.str <- formatC(median.steps.perday, format="f", digits=2)
hist(steps.perday$x, breaks=10, main="Histogram of steps per day", xlab="Steps/Day", col="gray")
abline(v= mean.steps.perday  , col="blue" ) # mean   vertical line
abline(v= median.steps.perday, col="green") # median vertical line
legend("topright", legend=c(paste("mean:", mean.str), paste("median:", median.str)), lty=1, col=c("blue", "green") )
```
- Mean steps per day: `r mean.str`
- Median steps per day: `r median.str`
## What is the average daily activity pattern?
```{r echo=TRUE, tidy=FALSE, fig.height=6, fig.width=11}
mean.steps.perinterval <- aggregate(movement$steps, by= list(movement$interval), mean, na.rm=T)
plot(mean.steps.perinterval$Group.1, mean.steps.perinterval$x, type="l", xlab="time of day (5 min. intervals)", ylab="Mean steps per interval", xaxt="n")
axis(1, at=seq(0,2300,100), labels=sprintf("%04d", seq(0,2300,100)))
```
```{r echo=TRUE, tidy=FALSE}
# find the 5-minute interval with the highest average number of steps
maxinterval           <- which.max(mean.steps.perinterval$x)
maxinterval.time.str  <- sprintf("%04d", mean.steps.perinterval[maxinterval,]$Group.1)
maxinterval.steps.str <- sprintf("%.1f", mean.steps.perinterval[maxinterval,]$x      )
```
- Time of interval with highest average number of steps: `r maxinterval.time.str`
- Average number of steps for this interval: `r maxinterval.steps.str`
## Imputing missing values
```{r echo=TRUE, tidy=FALSE}
# number of missing values
movement.na.count <- sum(is.na(movement$steps))
```
- Total number of missing values: `r  movement.na.count`
We'll replace all of the missing values in the dataset by the mean for that day
```{r echo=TRUE, tidy=FALSE}
```
## Are there differences in activity patterns between weekdays and weekends?
steps.perday
mean.steps.perinterval
mean.steps.perinterval == 0
steps.perday
mean.steps.perinterval
movement$steps
movement$steps
movement$steps[1]
movement$steps[2]
movement$steps[3,]
movement$steps[,3]
movement$steps[3]
mean.steps.perinterval
mean.steps.perinterval[5]
mean.steps.perinterval$x[5]
for (idx in movement)
if (is.na(movement$steps[idx]))
interval            <- movement$interval[idx]
movement$steps[idx] <- mean.steps.perinterval$x[interval]
movement$steps[1]
movement$steps[2]
movement$steps[222]
movement$steps[2242]
movement$steps[22442]
movement$steps
movement$steps[9000]
movement$steps[8000]
is.na(movement$steps[1:100])
is.na(movement$steps[1:1000])
is.na(movement$steps)
for (idx in movement) idx
for (idx in movement) print(idx)
for (idx in movement) print(idx[1])
for (idx in movement.length) print(idx)
for (idx in length(movement) print(idx)
length(movement)
dim(movement)
nrow(movement)
for (idx in nrow(movement))
if (is.na(movement$steps[idx]))
interval            <- movement$interval[idx]
movement$steps[idx] <- mean.steps.perinterval$x[interval]
movement <- read.csv("activity.csv")
for (idx in nrow(movement))
if (is.na(movement$steps[idx]))
{
interval            <- movement$interval[idx]
movement$steps[idx] <- mean.steps.perinterval$x[interval]
}
movement.na.count <- sum(is.na(movement$steps))
movement.na.count
movement$steps
for (idx in nrow(movement)) idx
for (idx in nrow(movement)) print(idx)
for (idx in 1:nrow(movement)) print(idx)
for (idx in 1:nrow(movement))
if (is.na(movement$steps[idx]))
{
interval            <- movement$interval[idx]
movement$steps[idx] <- mean.steps.perinterval$x[interval]
}
mean.steps.perinterval$x[1:100]
movement$steps[1:100]
mean.steps.perinterval$x[1:300]
for (idx in 1:nrow(movement)) movement$interval[idx]
for (idx in 1:nrow(movement)) print(movement$interval[idx])
match(2355, movement$interval)
match(2350, movement$interval)
for (idx in 1:nrow(movement))
if (is.na(movement$steps[idx]))
{
interval            <- movement$interval[idx]
interval.idx        <- match(interval, movement$interval)
movement$steps[idx] <- mean.steps.perinterval$x[interval.idx]
}
sum(is.na(movement$steps)
)
movement$interval
match(interval, movement$interval)
match(2355, movement$interval)
match(2350, movement$interval)
match(0000, movement$interval)
match(0004, movement$interval)
match(0005, movement$interval)
movement$interval
mean.steps.perinterval$x
mean.steps.perinterval
mean.steps.perinterval$Group.1
movement <- read.csv("activity.csv")
sum(is.na(movement$steps))
for (idx in 1:nrow(movement))
if (is.na(movement$steps[idx]))
{
interval            <- movement$interval[idx]                          # interval
interval.idx        <- match(interval, mean.steps.perinterval$Group.1) # idx of interval in mean.steps.perinterval
movement$steps[idx] <- mean.steps.perinterval$x[interval.idx]          # replace with mean value
}
sum(is.na(movement$steps))
mean.steps.perinterval$Group.1
steps.perday$x
# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
```{r echo=TRUE}
# read input data
movement <- read.csv("activity.csv")
```
There are a total of 17,568 observations in this dataset.
The variables included in this dataset are:
- steps: Number of steps taking in a 5-minute interval (missing values are coded as NA)
- date: The date on which the measurement was taken in YYYY-MM-DD format
- interval: Identifier for the 5-minute interval in which measurement was taken
## What is mean total number of steps taken per day?
```{r echo=TRUE, tidy=FALSE, fig.height=6, fig.width=11}
steps.perday <- aggregate(movement$steps, by= list(movement$date), sum, na.rm=T)
# find mean and median of steps per day
mean.steps.perday   <- mean  (steps.perday$x)
median.steps.perday <- median(steps.perday$x)
mean.str   <- formatC(mean.steps.perday  , format="f", digits=2)
median.str <- formatC(median.steps.perday, format="f", digits=2)
hist(steps.perday$x, breaks=10, main="Histogram of steps per day", xlab="Steps/Day", col="gray")
abline(v= mean.steps.perday  , col="blue" ) # mean   vertical line
abline(v= median.steps.perday, col="green") # median vertical line
legend("topright", legend=c(paste("mean:", mean.str), paste("median:", median.str)), lty=1, col=c("blue", "green") )
```
- Mean steps per day: `r mean.str`
- Median steps per day: `r median.str`
## What is the average daily activity pattern?
```{r echo=TRUE, tidy=FALSE, fig.height=6, fig.width=11}
mean.steps.perinterval <- aggregate(movement$steps, by= list(movement$interval), mean, na.rm=T)
plot(mean.steps.perinterval$Group.1, mean.steps.perinterval$x, type="l", xlab="time of day (5 min. intervals)", ylab="Mean steps per interval", xaxt="n")
axis(1, at=seq(0,2300,100), labels=sprintf("%04d", seq(0,2300,100)))
```
```{r echo=TRUE, tidy=FALSE}
# find the 5-minute interval with the highest average number of steps
maxinterval           <- which.max(mean.steps.perinterval$x) # index of max
maxinterval.time.str  <- sprintf("%04d", mean.steps.perinterval[maxinterval,]$Group.1)
maxinterval.steps.str <- sprintf("%.1f", mean.steps.perinterval[maxinterval,]$x      )
```
- Time of interval with highest average number of steps: `r maxinterval.time.str`
- Mean number of steps for this interval: `r maxinterval.steps.str`
## Imputing missing values
```{r echo=TRUE, tidy=FALSE}
# number of missing values
movement.na.count <- sum(is.na(movement$steps))
```
- Total number of missing values: `r  movement.na.count`
We'll create a copy of movement, and replace all of the missing values in the dataset by the mean steps for that time interval.
```{r echo=TRUE, tidy=FALSE}
movement2 <- movement
for (idx in 1:nrow(movement2))
if (is.na(movement2$steps[idx]))
{
interval             <- movement2$interval[idx]                         # interval
interval.idx         <- match(interval, mean.steps.perinterval$Group.1) # idx of interval in mean.steps.perinterval
movement2$steps[idx] <- mean.steps.perinterval$x[interval.idx]          # replace with mean value
}
```
We'll now explore if after replacing NAs - the mean and median steps per day are different
```{r echo=TRUE, tidy=FALSE, fig.height=6, fig.width=11}
steps.perday <- aggregate(movement2$steps, by= list(movement2$date), sum, na.rm=T)
# find mean and median of steps per day
mean.steps.perday   <- mean  (steps.perday$x)
median.steps.perday <- median(steps.perday$x)
mean.str   <- formatC(mean.steps.perday  , format="f", digits=2)
median.str <- formatC(median.steps.perday, format="f", digits=2)
hist(steps.perday$x, breaks=10, main="Histogram of steps per day", xlab="Steps/Day", col="gray")
abline(v= mean.steps.perday  , col="blue" ) # mean   vertical line
abline(v= median.steps.perday, col="green") # median vertical line
legend("topright", legend=c(paste("mean:", mean.str), paste("median:", median.str)), lty=1, col=c("blue", "green") )
```
- Mean steps per day: `r mean.str`
- Median steps per day: `r median.str`
We can see that the general shape of the histogram is similar.
We can also see that mean and media steps per day are bit higher, and the frequency of days with 0 steps is much lower.
## Are there differences in activity patterns between weekdays and weekends?
steps.perday
steps.perday$x
mean(steps.perday$x)
median(steps.perday$x)
steps.perday <- aggregate(movement2$steps, by= list(movement2$date), sum, na.rm=T)
movement2 <- movement
for (idx in 1:nrow(movement2))
if (is.na(movement2$steps[idx]))
{
interval             <- movement2$interval[idx]                         # interval
interval.idx         <- match(interval, mean.steps.perinterval$Group.1) # idx of interval in mean.steps.perinterval
movement2$steps[idx] <- mean.steps.perinterval$x[interval.idx]          # replace with mean value
}
steps.perday <- aggregate(movement2$steps, by= list(movement2$date), sum, na.rm=T)
mean(steps.perday$x)
median(steps.perday$x)
steps.perday$x
round(5.4)
round(5.6)
movement2
movement2$date
weekdays(movement2$date)
weekdays(x, movement2$date)
weekdays( movement2$date)
weekdays(x=movement2$date)
weekdays(movement2$date)
weekdays(as.Date(movement2$date))
movement2 <- rbind(movement2, weekdays(as.Date(movement2$date)))
weekdays(as.Date(movement2$date))
unique(weekdays(as.Date(movement2$date)))
is.na(weekdays(as.Date(movement2$date)))
sum(is.na(weekdays(as.Date(movement2$date))))
weekdays(as.Date(movement2$date))
is.na(weekdays(as.Date(movement2$date)))
is.na(weekdays(as.Date(movement2$date)))
summaey(is.na(weekdays(as.Date(movement2$date))))
summary(is.na(weekdays(as.Date(movement2$date))))
match(NA, is.na(weekdays(as.Date(movement2$date)))))
match(NA, is.na(weekdays(as.Date(movement2$date))))
match(na, is.na(weekdays(as.Date(movement2$date))))
match(TRUE, is.na(weekdays(as.Date(movement2$date))))
dim(weekdays)
dim(movement2)
movement[17568]
movement[,17568]
movement[17568,]
movement[17569,]
movement
na.omit.data.frame(movement)
na.omit(movement)
dim(na.omit(movement))
dim(movement)
dim(all(na.omit(movement)))
dim(complete.cases(movement)))
dim(complete.cases(movement))
movement[!is.na(movement$date)]
movement[!is.na(movement$date),]
dim(movement[!is.na(movement$date),])
dim(movement)
dim(movement[,!is.na(movement$date)])
dim(movement[!is.na(movement$date)],)
dim(movement[!is.na(movement$date)])
movement[!is.na(movement$date)]
movement[!is.na(movement$date),]
dim(movement[!is.na(movement$date),])
movement <- read.csv("activity.csv")
dim(movement)
dim(movement[!is.na(movement$date),])
dim(movement[is.na(movement$date),])
sum(is.na(movement$date))
movement[17568
]
movement[17568,]
movement[17569,]
movement[17570,]
dim(movement)
movement$date
is.na(movement$date)
sum(is.na(movement$date))
movement2 <- rbind(movement2, weekdays(as.Date(movement2$date)))
as.Date(movement2$date)
unique(as.Date(movement2$date))
unique((movement2$date))
unique(is.na(movement2$date))
is.na(movement2$date)
sum(is.na(movement2$date))
sum(is.na(movement$date))
movement2 <- movement
sum(is.na(movement$date))
for (idx in 1:nrow(movement2))
if (is.na(movement2$steps[idx]))
{
interval             <- movement2$interval[idx]                         # interval
interval.idx         <- match(interval, mean.steps.perinterval$Group.1) # idx of interval in mean.steps.perinterval
movement2$steps[idx] <- round(mean.steps.perinterval$x[interval.idx])   # replace with round of mean value
}
sum(is.na(movement$date))
steps.perday <- aggregate(movement2$steps, by= list(movement2$date), sum, na.rm=T)
as.Date(movement2$date)
unique(as.Date(movement2$date))
weekdays(as.Date(movement2$date))
unique(weekdays(as.Date(movement2$date)))
movement2 <- rbind(movement2, weekdays(as.Date(movement2$date)))
unique(weekdays(as.Date(movement2$date)))
movement2 <- movement
weekdays(movement2$date)
weekdays(as.Date(movement2$date))
movement2 <- cbind(movement2, weekdays(as.Date(movement2$date)))
movement2
weekdays(as.Date(movement2$date))
weekdays(as.Date(movement2$date), abbreviate=F)
weekdays(as.Date(movement2$date), abbreviate=T)
as.POSIXlt(movement2$date)$wday
3 in [3,4]
is.element(2, c(3,4))
is.element(2, c(2,3,4))
movement2 <- movement
weekend  <-  c(0,6) # 0: Sunday up to 6: Saturday
weekend  <-  c(0,6) # 0: Sunday up to 6: Saturday
movement2 <- cbind(movement2, if(is.element(as.POSIXlt(movement2$date)$wday, weekend), "weekend"", "weekday")
movement2 <- cbind(movement2, ifelse(is.element(as.POSIXlt(movement2$date)$wday, weekend), "weekend"", "weekday")
movement2 <- cbind(movement2, ifelse(is.element(as.POSIXlt(movement2$date)$wday, weekend), "weekend", "weekday")
)
movement32
movement2
# Reproducible Research: Peer Assessment 1
## Loading and preprocessing the data
```{r echo=TRUE}
# read input data
movement <- read.csv("activity.csv")
# the last row is all NA; let's delete rows with NA date
```
There are a total of 17,568 observations in this dataset.
The variables included in this dataset are:
- steps: Number of steps taking in a 5-minute interval (missing values are coded as NA)
- date: The date on which the measurement was taken in YYYY-MM-DD format
- interval: Identifier for the 5-minute interval in which measurement was taken
## What is mean total number of steps taken per day?
```{r echo=TRUE, tidy=FALSE, fig.height=6, fig.width=11}
steps.perday <- aggregate(movement$steps, by= list(movement$date), sum, na.rm=T)
# find mean and median of steps per day
mean.steps.perday   <- mean  (steps.perday$x)
median.steps.perday <- median(steps.perday$x)
mean.str   <- formatC(mean.steps.perday  , format="f", digits=2)
median.str <- formatC(median.steps.perday, format="f", digits=2)
hist(steps.perday$x, breaks=10, main="Histogram of steps per day", xlab="Steps/Day", col="gray")
abline(v= mean.steps.perday  , col="blue" ) # mean   vertical line
abline(v= median.steps.perday, col="green") # median vertical line
legend("topright", legend=c(paste("mean:", mean.str), paste("median:", median.str)), lty=1, col=c("blue", "green") )
```
- Mean steps per day: `r mean.str`
- Median steps per day: `r median.str`
## What is the average daily activity pattern?
```{r echo=TRUE, tidy=FALSE, fig.height=6, fig.width=11}
mean.steps.perinterval <- aggregate(movement$steps, by= list(movement$interval), mean, na.rm=T)
plot(mean.steps.perinterval$Group.1, mean.steps.perinterval$x, type="l", xlab="time of day (5 min. intervals)", ylab="Mean steps per interval", xaxt="n")
axis(1, at=seq(0,2300,100), labels=sprintf("%04d", seq(0,2300,100)))
```
```{r echo=TRUE, tidy=FALSE}
# find the 5-minute interval with the highest average number of steps
maxinterval           <- which.max(mean.steps.perinterval$x) # index of max
maxinterval.time.str  <- sprintf("%04d", mean.steps.perinterval[maxinterval,]$Group.1)
maxinterval.steps.str <- sprintf("%.1f", mean.steps.perinterval[maxinterval,]$x      )
```
- Time of interval with highest average number of steps: `r maxinterval.time.str`
- Mean number of steps for this interval: `r maxinterval.steps.str`
## Imputing missing values
```{r echo=TRUE, tidy=FALSE}
# number of missing values
movement.na.count <- sum(is.na(movement$steps))
```
- Total number of missing values: `r  movement.na.count`
We'll create a copy of movement, and replace all of the missing values in the dataset by the *round* of the mean steps for that time interval.
```{r echo=TRUE, tidy=FALSE}
movement2 <- movement
for (idx in 1:nrow(movement2))
if (is.na(movement2$steps[idx]))
{
interval             <- movement2$interval[idx]                         # interval
interval.idx         <- match(interval, mean.steps.perinterval$Group.1) # idx of interval in mean.steps.perinterval
movement2$steps[idx] <- round(mean.steps.perinterval$x[interval.idx])   # replace with round of mean value
}
```
We'll now explore if after replacing NAs - the mean and median steps per day are different
```{r echo=TRUE, tidy=FALSE, fig.height=6, fig.width=11}
steps.perday <- aggregate(movement2$steps, by= list(movement2$date), sum, na.rm=T)
# find mean and median of steps per day
mean.steps.perday   <- mean  (steps.perday$x)
median.steps.perday <- median(steps.perday$x)
mean.str   <- formatC(mean.steps.perday  , format="f", digits=2)
median.str <- formatC(median.steps.perday, format="f", digits=2)
hist(steps.perday$x, breaks=10, main="Histogram of steps per day", xlab="Steps/Day", col="gray")
abline(v= mean.steps.perday  , col="blue" ) # mean   vertical line
abline(v= median.steps.perday, col="green") # median vertical line
legend("topright", legend=c(paste("mean:", mean.str), paste("median:", median.str)), lty=1, col=c("blue", "green") )
```
- Mean steps per day: `r mean.str`
- Median steps per day: `r median.str`
We can see that the general shape of the histogram is similar.
We can also see that mean and media steps per day are bit higher, and the frequency of days with 0 steps is much lower.
## Are there differences in activity patterns between weekdays and weekends?
We use as.POSIXlt() instead of weekdays(), since the result of weekdays() depends on the lcoale (see http://stackoverflow.com/questions/17031002/get-weekdays-in-english-in-rstudio)
```{r echo=TRUE, tidy=FALSE}
weekend  <-  c(0,6) # 0: Sunday up to 6: Saturday
movement2 <- cbind(movement2, ifelse(is.element(as.POSIXlt(movement2$date)$wday, weekend), "weekend", "weekday"))
```
movement2
movement2
summary(movement2)
head(movement2)
col.names(movement2)
col.name(movement2)
colnames(movement2)
colnames(movement2)[3]
colnames(movement2)[4]
movement2 <- movement
weekend  <-  c(0,6) # 0: Sunday up to 6: Saturday
movement2 <- cbind(movement2, ifelse(is.element(as.POSIXlt(movement2$date)$wday, weekend), "weekend", "weekday"))
colnames(movement2)[4] <- "daytype"
head(movement2)
ggplot(mpg, aes(displ, hwy))+ geom_point()+ facet_wrap(~manufacturer)
library(lattice2)
library(ggplot2)
install.packages("ggplot2")
ggplot(mpg, aes(displ, hwy))+ geom_point()+ facet_wrap(~manufacturer)
library(ggplot2)
ggplot(mpg, aes(displ, hwy))+ geom_point()+ facet_wrap(~manufacturer)
mpg
head(mpg)
ggplot(movement2, aes(date, steps))+ geom_point()+ facet_wrap(~daytype)
ggplot(movement2, aes(date, steps))+ geom_point()+ facet_wrap(daytype)
ggplot(movement2, aes(date, steps))+ geom_point()+ facet_wrap(~daytype)
mean.steps.perinterval <- aggregate(movement2$steps, by= list(movement2$interval), mean, na.rm=T)
head(mean.steps.perinterval)
movement2
mean.steps.perinterval <- aggregate(movement2$steps, by= list(movement2$interval), mean)
mean.steps.perinterval
mean.steps.perinterval <- aggregate(movement2$steps, by= list(movement2$interval), mean, na.rm=T)
mean.steps.perinterval
movement2$steps
movement2 <- movement
for (idx in 1:nrow(movement2))
if (is.na(movement2$steps[idx]))
{
interval             <- movement2$interval[idx]                         # interval
interval.idx         <- match(interval, mean.steps.perinterval$Group.1) # idx of interval in mean.steps.perinterval
movement2$steps[idx] <- round(mean.steps.perinterval$x[interval.idx])   # replace with round of mean value
}
steps.perday <- aggregate(movement2$steps, by= list(movement2$date), sum, na.rm=T)
# find mean and median of steps per day
mean.steps.perday   <- mean  (steps.perday$x)
median.steps.perday <- median(steps.perday$x)
mean.str   <- formatC(mean.steps.perday  , format="f", digits=2)
median.str <- formatC(median.steps.perday, format="f", digits=2)
hist(steps.perday$x, breaks=10, main="Histogram of steps per day", xlab="Steps/Day", col="gray")
abline(v= mean.steps.perday  , col="blue" ) # mean   vertical line
abline(v= median.steps.perday, col="green") # median vertical line
legend("topright", legend=c(paste("mean:", mean.str), paste("median:", median.str)), lty=1, col=c("blue", "green") )
weekend   <-  c(0,6) # 0: Sunday up to 6: Saturday. weekends in most Western countries are Sunday and Saturday
movement2 <- cbind(movement2, ifelse(is.element(as.POSIXlt(movement2$date)$wday, weekend), "weekend", "weekday"))
colnames(movement2)[4] <- "daytype"
mean.steps.perinterval <- aggregate(movement2$steps, by= list(movement2$interval), mean)
mean.steps.perinterval
head(mean.steps.perinterval)
mean.steps.perinterval
mean.steps.perinterval <- aggregate(movement2$steps, by= list(movement2$interval, movement2daytype), mean)
mean.steps.perinterval <- aggregate(movement2$steps, by= list(movement2$interval, movement2$daytype), mean)
mean.steps.perinterval
ggplot(movement2, aes(date, steps)) + geom_point()+ facet_wrap(~daytype)
ggplot(mean.steps.perinterval, aes(interval, steps)) + geom_point()+ facet_wrap(~daytype)
head(mean.steps.perinterval)
colnames(mean.steps.perinterval) <- c("interval", "daytype", "mean.steps")
ggplot(mean.steps.perinterval, aes(interval, steps)) + geom_point()+ facet_wrap(~daytype)
ggplot(mean.steps.perinterval, aes(interval, mean.steps)) + geom_point()+ facet_wrap(~daytype)
ggplot(mean.steps.perinterval, aes(interval, mean.steps)) + geom_line()+ facet_wrap(~daytype)
ggplot(mean.steps.perinterval, aes(interval, mean.steps)) + geom_point()+ facet_wrap(~daytype .)
ggplot(mean.steps.perinterval, aes(interval, mean.steps)) + geom_point()+ facet_wrap(~daytype)
ggplot(mean.steps.perinterval, aes(interval, mean.steps)) + geom_point()+ facet_wrap(daytype~)
ggplot(mean.steps.perinterval, aes(interval, mean.steps)) + geom_point()+ facet_wrap(~daytype .)
ggplot(mean.steps.perinterval, aes(interval, mean.steps)) + geom_point()+ facet_grid(~daytype .)
ggplot(mean.steps.perinterval, aes(interval, mean.steps)) + geom_point()+ facet_grid(~daytype)
ggplot(mean.steps.perinterval, aes(interval, mean.steps)) + geom_point()+ facet_wrap(~daytype)
ggplot(mean.steps.perinterval, aes(interval, mean.steps)) + geom_line()+ facet_wrap(~daytype)
ggplot(mean.steps.perinterval, aes(interval, mean.steps)) + geom_line()+ facet_grid(~daytype)
ggplot(mean.steps.perinterval, aes(interval, mean.steps)) + geom_line()+ facet_grid(daytype)
ggplot(mean.steps.perinterval, aes(interval, mean.steps)) + geom_line()+ facet_grid(daytype ~)
ggplot(mean.steps.perinterval, aes(interval, mean.steps)) + geom_line()+ facet_grid(daytype ~ .)
ggplot(mean.steps.perinterval, aes(interval, mean.steps)) + geom_line()+ facet_wrap(daytype ~ .)
ggplot(mean.steps.perinterval, aes(interval, mean.steps)) + geom_line()+ facet_grid(daytype ~ .)
